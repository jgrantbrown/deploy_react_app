{"version":3,"sources":["components/MainBody/MainBody.js","containers/MainContent/MainContent.js","components/NavBar/NavBar.js","containers/Projects/Projects.js","containers/About/About.js","App.js","serviceWorker.js","index.js"],"names":["MainBody","react_default","a","createElement","className","Component","MainContent","components_MainBody_MainBody","NavBar","Link","to","Projects","About","App","components_NavBar_NavBar","Switch","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kVAkBeA,mLAZX,OACEC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAAd,OACEH,EAAAC,EAAAC,cAAA,uCACAF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,wCACAF,EAAAC,EAAAC,cAAA,mDAPeE,aCQRC,0LANX,OACEL,EAAAC,EAAAC,cAACI,EAAD,aAHoBF,8BCiBXG,mLAZX,OACEP,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACZH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,YAAb,mBACFH,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAMC,GAAG,KAAT,KAAeT,EAAAC,EAAAC,cAAA,kBACfF,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAMC,GAAG,UAAT,KAAoBT,EAAAC,EAAAC,cAAA,mBACpBF,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAMC,GAAG,aAAT,KAAuBT,EAAAC,EAAAC,cAAA,+BAPRE,aCUNM,0LAXX,OACEV,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBACZH,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,oCACAF,EAAAC,EAAAC,cAAA,oCAPeE,cCURO,0LARX,OACEX,EAAAC,EAAAC,cAAA,KAAGC,UAAU,iBAAb,kCAHcC,sCCsBLQ,mLAdX,OACEZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAACW,EAAD,MAEAb,EAAAC,EAAAC,cAACY,EAAA,EAAD,KACEd,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,oBAAoBC,UAAWb,IACjDL,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,YAAYC,UAAWR,IACzCV,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,SAASC,UAAWP,aAThCP,aCEEe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uECTNC,IAASC,OACPzB,EAAAC,EAAAC,cAACwB,EAAA,EAAD,KACE1B,EAAAC,EAAAC,cAACyB,EAAD,OAEDC,SAASC,eAAe,SDoHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.902e7f04.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n// import './MainBody.css';\n\nclass MainBody extends Component {\n  render() {\n    return (\n      <h1 className=\"App-body\">Body\n        <p>Include Contact info here:</p>\n        <p>Photo</p>\n        <p>Short summary of stuff here</p>\n        <p>THis site is built using React</p>\n      </h1>\n\n    );\n  }\n}\n\nexport default MainBody;\n","import React, { Component } from 'react';\nimport MainBody from '../../components/MainBody/MainBody'\nimport './MainContent.css';\n\nclass MainContent extends Component {\n  render() {\n    return (\n      <MainBody />\n    );\n  }\n}\n\nexport default MainContent;\n","import React, { Component } from 'react';\n\nimport './NavBar.css';\n\n// REactRouter\nimport { Link } from 'react-router-dom'\n\nclass NavBar extends Component {\n  render() {\n    return (\n      <h1 className=\"App-NavBar\">\n        <p className=\"App-Logo\"> Jason G. Brown</p>\n      <Link to=\"/\">  <p >Home</p></Link>\n      <Link to=\"/about\">  <p >About</p></Link>\n      <Link to=\"/projects\">  <p > Projects</p></Link>\n      </h1>\n\n    );\n  }\n}\n\nexport default NavBar;\n","import React, { Component } from 'react';\nimport './Projects.css';\n\n\nclass Projects extends Component {\n  render() {\n    return (\n      <ul className=\"Project-list\">\n        <li>Parks Search</li>\n        <li>Concert Log</li>\n        <li>Classroom Charity List</li>\n        <li>Crypto-Balance</li>\n      </ul>\n    );\n  }\n}\n\nexport default Projects;\n","import React, { Component } from 'react';\nimport './About.css';\n\n\nclass About extends Component {\n  render() {\n    return (\n      <p className=\"About-content\">\n        WHole bunch about me!!!\n      </p>\n    );\n  }\n}\n\nexport default About;\n","import React, { Component } from 'react';\nimport MainContent from './containers/MainContent/MainContent'\nimport NavBar from './components/NavBar/NavBar'\nimport Projects from './containers/Projects/Projects'\nimport About from './containers/About/About'\nimport './App.css';\n\n// REact Router\nimport { Switch, Route } from 'react-router-dom'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n          <NavBar />\n\n          <Switch>\n            <Route exact path='/deploy_react_app' component={MainContent}/>\n            <Route exact path='/projects' component={Projects}/>\n            <Route exact path='/about' component={About}/>\n          </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// REACT ROUTER\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render((\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n), document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}